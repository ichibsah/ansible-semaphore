---

- name: 'QIT Automation 1.0'
  hosts: all
  #connection: local
  #remote_user: adminqit
  #remote_user: adminqit
  #ansible_user: adminqit #ERROR! 'ansible_user' is not a valid attribute for a Play
  #become: true
  #gathering: smart #ERROR! 'gathering' is not a valid attribute for a Play
  gather_facts: True
  ignore_errors: True
  ignore_unreachable: true
  #become_method: runas 
  #become_user: adminqit

# https://docs.ansible.com/ansible/latest/collections/ansible/windows/index.html#plugins-in-ansible-windows  
# https://docs.ansible.com/ansible/latest/collections/index.html#list-of-collections

# proxmox
# https://docs.ansible.com/ansible/latest/collections/community/general/index.html#plugins-in-community-general

  vars:
    #*ansible_remote_user: adminqit #ERROR! 'ansible_remote_user' is not a valid attribute for a Play
    #*ansible_ssh_user: adminqit #ERROR! 'ansible_ssh_user' is not a valid attribute for a Play
    #ansible_shell_type: powershell #ERROR! 'ansible_shell_type' is not a valid attribute for a Play
    ansible_shell_type: cmd #ERROR! 'ansible_shell_type' is not a valid attribute for a Play
    #shell_type: powershell #ERROR! 'shell_type' is not a valid attribute for a Play
    #remote_tmp: C:\Tmp
    #ansible_remote_tmp: c\temp
    #remote_tmp: c\temp
    #ansible_ssh_password: adminqit
    #ansible_become_pass: '{{ jenkins_become_pass }}'
    #ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
      # ansible_user: ansible
      # ansible_password: "{{ password }}"
      # ansible_connection: winrm
      # ansible_connection: chocolatey
      # ansible_winrm_transport: ntlm
      # ansible_winrm_server_cert_validation: ignore
    logpath: C:\ansible-log
    filename: "{{ lookup('pipe', 'date +%Y%m%d') }}.log"

  tasks: 
  - name: Job-id 0000 | Create Ansible logs directory structure
    ansible.windows.win_file:
      path: "{{logpath}}"
      state: directory

  # https://learn.microsoft.com/en-gb/windows/win32/intl/table-of-geographical-locations
  - name: Job 997 | Set format, location and unicode to German and copy settings, reboot if required
    community.windows.win_region:
      location: 94
      format: de-DE
      unicode_language: de-DE
    register: result

  - name: Job 998 | Set timezone to 'W. Europe Standard Time' (GMT +01:00)
    community.windows.win_timezone:
      timezone: W. Europe Standard Time
      #log_path: "{{logpath}}\\job-998-{{filename}}"

  # - name: Job 999 | Set timezone to Europe/Berlin
  #   community.general.timezone:
  #     name: Europe/Berlin
  #     log_path: "{{logpath}}\\job-999-{{filename}}"

  - name: Job 1001 | searched all updates and log it
    ansible.windows.win_updates:
      category_names: '*'
      reboot: false
      state: searched
      log_path: "{{logpath}}\\job-1001-{{filename}}"

  - name: Job 1002 | download all updates and log it
    ansible.windows.win_updates:
      category_names: '*'
      reboot: false
      state: downloaded
      log_path: "{{logpath}}\\job-1002-{{filename}}"

  - name: Job 1003 | install all updates and log it
    ansible.windows.win_updates:
      category_names: '*'
      reboot: false
      #reboot: true
      state: installed
      reboot_timeout: 3600
      log_path: "{{logpath}}\\job-1003-{{filename}}"
    register: result

  - ansible.windows.win_reboot:
    when: result.reboot_required      

  # - name: Run a command under a non-Powershell interpreter (cmd in this case)
  #   ansible.windows.win_shell: echo %HOMEDIR%
  #   args:
  #     executable: cmd
  #   register: homedir_out

  # - name: Change the working directory to somedir/ before executing the command
  #   ansible.windows.win_shell: C:\packages\choco.ps1 >> C:\packages\somelog.txt
  #   args:
  #     chdir: C:\packages

  # - name: List user accounts on a Windows system
  #   ansible.builtin.raw: Get-WmiObject -Class Win32_UserAccount

  # - name: Run a pwsh command
  #   shell: Get-Process | ConvertTo-Json -Depth 10
  #   args:
  #     executable: /usr/bin/pwsh
  #   register: result

  # - name: Process win_shell output
  #   set_fact:
  #     processes: "{{ result.stdout | from_json }}"

  # - name: Search for data
  #   set_fact:
  #     cron_process: "{{ processes | selectattr('Name', 'equalto', 'cron') | list }}"
  #   register: stdout, stderr_lines
      
  # - name: Log cron object
  #   debug:
  #     msg: "{{ cron_process }}"

  # - name: Debug process properties
  #   debug:
  #     msg: Process {{ cron_process[0].Name }} has SessionId {{ cron_process[0].SessionId }} and a VirtualMemorySize of {{ cron_process[0].VirtualMemorySize}}


  # - name: Test the PsExec connection to the local system (target node) with your user
  #   community.windows.win_psexec:
  #     command: whoami.exe
  # - name: Run the 'whoami' executable with the '/all' argument
  #   ansible.windows.win_command:
  #     cmd: whoami.exe /all

  # - name: Run basic PowerShell script
  #   ansible.windows.win_powershell:
  #     script: |
  #       echo "Hello World"

  # # Install/uninstall with chocolatey
  # - name: Ensure 7-Zip is installed via Chocolatey
  #   win_chocolatey:
  #     name: 7zip
  #     state: present

  # - name: Check powershell version # works
  #   ansible.windows.win_shell: Get-Host | Select-Object Version

  # - name:  Check powershell version # works
  #   ansible.windows.win_shell: Get-Host | Select-Object Version
  #   args:
  #     executable: powershell

  # # Install/uninstall with chocolatey
  # - name: Ensure 7-Zip is installed via Chocolatey
  #   win_chocolatey:
  #     name: 7zip
  #     state: present

  # - name: command output
  #   ansible.builtin.debug:
  #     var: command_output.stdout_lines

  # - name: Run a pwsh command
  #   shell: Get-Process | ConvertTo-Json
  #   args:
  #     executable: /usr/bin/pwsh
  #   register: result

  # - name: Run a command under a non-Powershell interpreter (cmd in this case)
  #   ansible.windows.win_shell: echo %HOMEDIR%
  #   args:
  #     executable: cmd
  #   register: homedir_out

  # - name: Run multi-lined shell commands
  #   ansible.windows.win_shell: |
  #     $value = Test-Path -Path C:\temp
  #     if ($value) {
  #         Remove-Item -Path C:\temp -Force
  #     }
  #     New-Item -Path C:\temp -ItemType Directory

  # - name: Retrieve the input based on stdin
  #   ansible.windows.win_shell: '$string = [Console]::In.ReadToEnd(); Write-Output $string.Trim()'
  #   args:
  #     stdin: Input message





  # - name: Install all security, critical, and rollup updates without a scheduled task
  #   ansible.windows.win_updates:
  #     category_names:
  #       - SecurityUpdates
  #       - CriticalUpdates
  #       - UpdateRollups

  # - name: Search-only, return list of found updates (if any), log to C:\ansible_wu.txt
  #   ansible.windows.win_updates:
  #     category_names: SecurityUpdates
  #     state: searched
  #     log_path: C:\tmp\ansible_wu.txt

  # - name: Install all security updates with automatic reboots
  #   ansible.windows.win_updates:
  #     category_names:
  #     - SecurityUpdates
  #     reboot: true

  # - name: Install only particular updates based on the KB numbers
  #   ansible.windows.win_updates:
  #     category_names:
  #     - SecurityUpdates
  #     accept_list:
  #     - KB4056892
  #     - KB4073117

  # - name: Exclude updates based on the update title
  #   ansible.windows.win_updates:
  #     category_names:
  #     - SecurityUpdates
  #     - CriticalUpdates
  #     reject_list:
  #     - Windows Malicious Software Removal Tool for Windows
  #     - \d{4}-\d{2} Cumulative Update for Windows Server 2016

  # # Optionally, you can increase the reboot_timeout to survive long updates during reboot
  # - name: Ensure we wait long enough for the updates to be applied during reboot
  #   ansible.windows.win_updates:
  #     reboot: true
  #     reboot_timeout: 3600

  # Search and download Windows updates
  # - name: Search and download Windows updates without installing them
  #   ansible.windows.win_updates:
  #     state: downloaded
  #     log_path: C:\tmp\ansible_downld.txt